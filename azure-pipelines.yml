# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/vsts/pipelines/apps/windows/dot-net

pool:
  vmImage: 'VS2017-Win2016'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

name: '$(Date:yy.MM.dd)$(Rev:.rr)'

steps:
# Install the .NET Core SDK.
- task: DotNetCoreInstaller@0
  displayName: 'Install: .NET Core SDK'
  inputs:
    packageType: 'sdk'
    version: '2.0.0'

# Run pre-build steps.
- task: DotNetCoreCLI@2
  displayName: 'dotnet: Restore'
  inputs:
    command: 'restore'
    projects: 'MonoMod*/*.csproj'
- task: PowerShell@2
  displayName: 'Run: PowerShell: azure-pipelines-prebuild.ps1'
  inputs:
    filePath: 'azure-pipelines-prebuild.ps1'

# Build.
- task: DotNetCoreCLI@2
  displayName: 'dotnet: Build'
  inputs:
    command: 'build'
    projects: 'MonoMod*/*.csproj'
    configuration: '$(buildConfiguration)'
    arguments: '--configuration $(buildConfiguration)'

# Create and "publish" main artifacts.
- template: 'azure-pipelines-postbuild.yml'
  parameters:
    targetFramework: 'net35'
- template: 'azure-pipelines-postbuild.yml'
  parameters:
    targetFramework: 'netstandard1.3'
- template: 'azure-pipelines-postbuild.yml'
  parameters:
    targetFramework: 'netstandard2.0'

# Create and "publish" nupkg artifacts.
- task: DotNetCoreCLI@2
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  displayName: 'Artifacts: Pack: nupkgs'
  continueOnError: true
  inputs:
    command: 'pack'
    nobuild: true
    configuration: '$(buildConfiguration)'
    versioningScheme: 'byBuildNumber'
    packagesToPack: 'MonoMod@(|.Utils|.RuntimeDetour|.RuntimeDetour.HookGen)/*.csproj'
    packDirectory: '$(Build.ArtifactStagingDirectory)/nupkgs'
- task: PublishBuildArtifacts@1
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  displayName: 'Artifacts: Publish: nupkgs'
  continueOnError: true
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/nupkgs'
    artifactName: 'nupkgs'
    publishLocation: 'Container'

# Run tests last.
- task: DotNetCoreCLI@2
  displayName: 'dotnet: Test'
  inputs:
    command: 'test'
    nobuild: true
    projects: 'MonoMod.UnitTest/*.csproj'
    configuration: '$(buildConfiguration)'

# Create and publish a "test" artifact.
- task: CopyFiles@2
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  displayName: 'Artifacts: Pack: test'
  continueOnError: true
  inputs:
    sourceFolder: '$(Agent.BuildDirectory)'
    contents: 'MonoMod.UnitTest/bin/**/*'
    targetFolder: '$(Build.ArtifactStagingDirectory)/test'
    cleanTargetFolder: true
    overWrite: true
    flattenFolders: true
- task: PublishBuildArtifacts@1
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  displayName: 'Artifacts: Publish: test'
  continueOnError: true
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/test'
    artifactName: 'test'
    publishLocation: 'Container'
